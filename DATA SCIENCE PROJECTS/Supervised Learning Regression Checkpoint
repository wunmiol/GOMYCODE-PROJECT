{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**1. Import you data and perform basic data exploration phase**"],"metadata":{"id":"cYT7wOdPO4eH"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.linear_model import LinearRegression\n","from sklearn.preprocessing import PolynomialFeatures\n","from sklearn.pipeline import make_pipeline\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.svm import SVR\n","from sklearn import metrics\n","from sklearn.metrics import mean_squared_error, r2_score\n","import matplotlib.pyplot as plt"],"metadata":{"id":"734pF8lwL5Fl"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fzyGuCKDq3CG"},"outputs":[],"source":["energy_cons = pd.read_csv('/content/5G_energy_consumption_dataset.csv')\n"]},{"cell_type":"code","source":["energy_cons.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":207},"id":"CW8jM98JMK29","executionInfo":{"status":"ok","timestamp":1719660877274,"user_tz":-60,"elapsed":621,"user":{"displayName":"Jacob Ojumu","userId":"10159632377303667920"}},"outputId":"6a92ca50-e23b-4c9c-8782-d530a67c7b1e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["              Time   BS     Energy      load  ESMODE   TXpower\n","0  20230101 010000  B_0  64.275037  0.487936     0.0  7.101719\n","1  20230101 020000  B_0  55.904335  0.344468     0.0  7.101719\n","2  20230101 030000  B_0  57.698057  0.193766     0.0  7.101719\n","3  20230101 040000  B_0  55.156951  0.222383     0.0  7.101719\n","4  20230101 050000  B_0  56.053812  0.175436     0.0  7.101719"],"text/html":["\n","  <div id=\"df-c54961f9-80b8-45f6-b000-cc9b4e471d2d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Time</th>\n","      <th>BS</th>\n","      <th>Energy</th>\n","      <th>load</th>\n","      <th>ESMODE</th>\n","      <th>TXpower</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>20230101 010000</td>\n","      <td>B_0</td>\n","      <td>64.275037</td>\n","      <td>0.487936</td>\n","      <td>0.0</td>\n","      <td>7.101719</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>20230101 020000</td>\n","      <td>B_0</td>\n","      <td>55.904335</td>\n","      <td>0.344468</td>\n","      <td>0.0</td>\n","      <td>7.101719</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>20230101 030000</td>\n","      <td>B_0</td>\n","      <td>57.698057</td>\n","      <td>0.193766</td>\n","      <td>0.0</td>\n","      <td>7.101719</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>20230101 040000</td>\n","      <td>B_0</td>\n","      <td>55.156951</td>\n","      <td>0.222383</td>\n","      <td>0.0</td>\n","      <td>7.101719</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>20230101 050000</td>\n","      <td>B_0</td>\n","      <td>56.053812</td>\n","      <td>0.175436</td>\n","      <td>0.0</td>\n","      <td>7.101719</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c54961f9-80b8-45f6-b000-cc9b4e471d2d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c54961f9-80b8-45f6-b000-cc9b4e471d2d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c54961f9-80b8-45f6-b000-cc9b4e471d2d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-39a348b2-47d8-4277-addf-c26472141a4a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-39a348b2-47d8-4277-addf-c26472141a4a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-39a348b2-47d8-4277-addf-c26472141a4a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"energy_cons","summary":"{\n  \"name\": \"energy_cons\",\n  \"rows\": 92629,\n  \"fields\": [\n    {\n      \"column\": \"Time\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 168,\n        \"samples\": [\n          \"20230105 220000\",\n          \"20230102 130000\",\n          \"20230102 190000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BS\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 923,\n        \"samples\": [\n          \"B_326\",\n          \"B_891\",\n          \"B_31\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Energy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.934644525986343,\n        \"min\": 0.747384155,\n        \"max\": 100.0,\n        \"num_unique_values\": 612,\n        \"samples\": [\n          72.19730942,\n          35.12705531,\n          63.97608371\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"load\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2346773034659599,\n        \"min\": 0.0,\n        \"max\": 0.993957447,\n        \"num_unique_values\": 58563,\n        \"samples\": [\n          0.52598,\n          0.136173077,\n          0.017891304\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ESMODE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3823174066745545,\n        \"min\": 0.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 1713,\n        \"samples\": [\n          1.956666667,\n          0.051244722,\n          1.841944444\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TXpower\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3099291022805215,\n        \"min\": 5.381165919,\n        \"max\": 8.375336323,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          6.726457399,\n          6.95142003,\n          6.7272047835\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["# Converting datetime columns\n","energy_cons['Time'] = pd.to_datetime(energy_cons['Time'])"],"metadata":{"id":"PHAmtutQMO7n"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["energy_cons.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":207},"id":"EcOFX2NXMfGr","executionInfo":{"status":"ok","timestamp":1719660877275,"user_tz":-60,"elapsed":62,"user":{"displayName":"Jacob Ojumu","userId":"10159632377303667920"}},"outputId":"ad2b05eb-73cc-4cc3-f661-d349bb4583b9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 Time   BS     Energy      load  ESMODE   TXpower\n","0 2023-01-01 01:00:00  B_0  64.275037  0.487936     0.0  7.101719\n","1 2023-01-01 02:00:00  B_0  55.904335  0.344468     0.0  7.101719\n","2 2023-01-01 03:00:00  B_0  57.698057  0.193766     0.0  7.101719\n","3 2023-01-01 04:00:00  B_0  55.156951  0.222383     0.0  7.101719\n","4 2023-01-01 05:00:00  B_0  56.053812  0.175436     0.0  7.101719"],"text/html":["\n","  <div id=\"df-5188f45d-5bf0-469b-8228-26cf2ea2e649\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Time</th>\n","      <th>BS</th>\n","      <th>Energy</th>\n","      <th>load</th>\n","      <th>ESMODE</th>\n","      <th>TXpower</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2023-01-01 01:00:00</td>\n","      <td>B_0</td>\n","      <td>64.275037</td>\n","      <td>0.487936</td>\n","      <td>0.0</td>\n","      <td>7.101719</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2023-01-01 02:00:00</td>\n","      <td>B_0</td>\n","      <td>55.904335</td>\n","      <td>0.344468</td>\n","      <td>0.0</td>\n","      <td>7.101719</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2023-01-01 03:00:00</td>\n","      <td>B_0</td>\n","      <td>57.698057</td>\n","      <td>0.193766</td>\n","      <td>0.0</td>\n","      <td>7.101719</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2023-01-01 04:00:00</td>\n","      <td>B_0</td>\n","      <td>55.156951</td>\n","      <td>0.222383</td>\n","      <td>0.0</td>\n","      <td>7.101719</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2023-01-01 05:00:00</td>\n","      <td>B_0</td>\n","      <td>56.053812</td>\n","      <td>0.175436</td>\n","      <td>0.0</td>\n","      <td>7.101719</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5188f45d-5bf0-469b-8228-26cf2ea2e649')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5188f45d-5bf0-469b-8228-26cf2ea2e649 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5188f45d-5bf0-469b-8228-26cf2ea2e649');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4dae0059-5c8c-4bec-8676-95eaaddf11fb\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4dae0059-5c8c-4bec-8676-95eaaddf11fb')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4dae0059-5c8c-4bec-8676-95eaaddf11fb button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"energy_cons","summary":"{\n  \"name\": \"energy_cons\",\n  \"rows\": 92629,\n  \"fields\": [\n    {\n      \"column\": \"Time\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2023-01-01 01:00:00\",\n        \"max\": \"2023-01-08 00:00:00\",\n        \"num_unique_values\": 168,\n        \"samples\": [\n          \"2023-01-05 22:00:00\",\n          \"2023-01-02 13:00:00\",\n          \"2023-01-02 19:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BS\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 923,\n        \"samples\": [\n          \"B_326\",\n          \"B_891\",\n          \"B_31\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Energy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.934644525986343,\n        \"min\": 0.747384155,\n        \"max\": 100.0,\n        \"num_unique_values\": 612,\n        \"samples\": [\n          72.19730942,\n          35.12705531,\n          63.97608371\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"load\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2346773034659599,\n        \"min\": 0.0,\n        \"max\": 0.993957447,\n        \"num_unique_values\": 58563,\n        \"samples\": [\n          0.52598,\n          0.136173077,\n          0.017891304\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ESMODE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3823174066745545,\n        \"min\": 0.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 1713,\n        \"samples\": [\n          1.956666667,\n          0.051244722,\n          1.841944444\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TXpower\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3099291022805215,\n        \"min\": 5.381165919,\n        \"max\": 8.375336323,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          6.726457399,\n          6.95142003,\n          6.7272047835\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["energy_cons.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":301},"id":"6LN1Gx_WMh1O","executionInfo":{"status":"ok","timestamp":1719660877289,"user_tz":-60,"elapsed":70,"user":{"displayName":"Jacob Ojumu","userId":"10159632377303667920"}},"outputId":"06658652-e5a6-414b-97bf-48a129a9a97d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                Time        Energy          load  \\\n","count                          92629  92629.000000  92629.000000   \n","mean   2023-01-04 00:31:21.324423424     28.138997      0.244705   \n","min              2023-01-01 01:00:00      0.747384      0.000000   \n","25%              2023-01-02 11:00:00     18.236173      0.057370   \n","50%              2023-01-03 20:00:00     24.065770      0.165550   \n","75%              2023-01-05 14:00:00     35.724963      0.363766   \n","max              2023-01-08 00:00:00    100.000000      0.993957   \n","std                              NaN     13.934645      0.234677   \n","\n","             ESMODE       TXpower  \n","count  92629.000000  92629.000000  \n","mean       0.081361      6.765427  \n","min        0.000000      5.381166  \n","25%        0.000000      6.427504  \n","50%        0.000000      6.875934  \n","75%        0.000000      6.875934  \n","max        4.000000      8.375336  \n","std        0.382317      0.309929  "],"text/html":["\n","  <div id=\"df-87c4316f-43ea-42f6-9b92-2ec475a7f965\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Time</th>\n","      <th>Energy</th>\n","      <th>load</th>\n","      <th>ESMODE</th>\n","      <th>TXpower</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>92629</td>\n","      <td>92629.000000</td>\n","      <td>92629.000000</td>\n","      <td>92629.000000</td>\n","      <td>92629.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2023-01-04 00:31:21.324423424</td>\n","      <td>28.138997</td>\n","      <td>0.244705</td>\n","      <td>0.081361</td>\n","      <td>6.765427</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>2023-01-01 01:00:00</td>\n","      <td>0.747384</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>5.381166</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>2023-01-02 11:00:00</td>\n","      <td>18.236173</td>\n","      <td>0.057370</td>\n","      <td>0.000000</td>\n","      <td>6.427504</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>2023-01-03 20:00:00</td>\n","      <td>24.065770</td>\n","      <td>0.165550</td>\n","      <td>0.000000</td>\n","      <td>6.875934</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2023-01-05 14:00:00</td>\n","      <td>35.724963</td>\n","      <td>0.363766</td>\n","      <td>0.000000</td>\n","      <td>6.875934</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2023-01-08 00:00:00</td>\n","      <td>100.000000</td>\n","      <td>0.993957</td>\n","      <td>4.000000</td>\n","      <td>8.375336</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>NaN</td>\n","      <td>13.934645</td>\n","      <td>0.234677</td>\n","      <td>0.382317</td>\n","      <td>0.309929</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-87c4316f-43ea-42f6-9b92-2ec475a7f965')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-87c4316f-43ea-42f6-9b92-2ec475a7f965 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-87c4316f-43ea-42f6-9b92-2ec475a7f965');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-25193b8b-0b7c-4189-ac18-8aa6bf6c83e3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-25193b8b-0b7c-4189-ac18-8aa6bf6c83e3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-25193b8b-0b7c-4189-ac18-8aa6bf6c83e3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"energy_cons\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Time\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000092629\",\n        \"max\": \"2023-01-08 00:00:00\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"92629\",\n          \"2023-01-04 00:31:21.324423424\",\n          \"2023-01-05 14:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Energy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32738.15605444694,\n        \"min\": 0.747384155,\n        \"max\": 92629.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          28.13899691233997,\n          35.72496263,\n          92629.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"load\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32749.192971696015,\n        \"min\": 0.0,\n        \"max\": 92629.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.24470454929011973,\n          0.363765957,\n          92629.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ESMODE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32749.071596494014,\n        \"min\": 0.0,\n        \"max\": 92629.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.08136075877410961,\n          0.3823174066745545,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TXpower\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32747.225725821467,\n        \"min\": 0.3099291022805215,\n        \"max\": 92629.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          92629.0,\n          6.7654266159951355,\n          8.375336323\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["energy_cons.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"befMdAKgMqz6","executionInfo":{"status":"ok","timestamp":1719660877290,"user_tz":-60,"elapsed":68,"user":{"displayName":"Jacob Ojumu","userId":"10159632377303667920"}},"outputId":"f6f8c989-9d8b-4c6b-9cd2-539825eee4bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 92629 entries, 0 to 92628\n","Data columns (total 6 columns):\n"," #   Column   Non-Null Count  Dtype         \n","---  ------   --------------  -----         \n"," 0   Time     92629 non-null  datetime64[ns]\n"," 1   BS       92629 non-null  object        \n"," 2   Energy   92629 non-null  float64       \n"," 3   load     92629 non-null  float64       \n"," 4   ESMODE   92629 non-null  float64       \n"," 5   TXpower  92629 non-null  float64       \n","dtypes: datetime64[ns](1), float64(4), object(1)\n","memory usage: 4.2+ MB\n"]}]},{"cell_type":"code","source":["energy_cons.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A_V3gD3aMs-l","executionInfo":{"status":"ok","timestamp":1719660877290,"user_tz":-60,"elapsed":65,"user":{"displayName":"Jacob Ojumu","userId":"10159632377303667920"}},"outputId":"3223409d-a3bd-48fc-803b-47abfd6a4dac"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Time       0\n","BS         0\n","Energy     0\n","load       0\n","ESMODE     0\n","TXpower    0\n","dtype: int64"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["energy_cons.duplicated().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u0MugnPXMxz9","executionInfo":{"status":"ok","timestamp":1719660877291,"user_tz":-60,"elapsed":61,"user":{"displayName":"Jacob Ojumu","userId":"10159632377303667920"}},"outputId":"849ca76f-1406-42c1-8afe-33850189bd12"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["energy_cons['Time'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SteVMP2t4exO","executionInfo":{"status":"ok","timestamp":1719660877292,"user_tz":-60,"elapsed":58,"user":{"displayName":"Jacob Ojumu","userId":"10159632377303667920"}},"outputId":"837c97c5-926b-40e2-e36b-bf303a37f7ad"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Time\n","2023-01-02 23:00:00    766\n","2023-01-02 18:00:00    759\n","2023-01-02 21:00:00    757\n","2023-01-02 02:00:00    756\n","2023-01-02 00:00:00    756\n","                      ... \n","2023-01-07 17:00:00    161\n","2023-01-07 01:00:00    151\n","2023-01-07 16:00:00    149\n","2023-01-07 13:00:00    140\n","2023-01-08 00:00:00     42\n","Name: count, Length: 168, dtype: int64"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":[],"metadata":{"id":"6lZUWV2rBP9t"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Scaling Data"],"metadata":{"id":"v-LaIS0aOZOM"}},{"cell_type":"code","source":["scaler = StandardScaler()\n","energy_cons[['load', 'ESMODE', 'TXpower']] = scaler.fit_transform(energy_cons[['load', 'ESMODE', 'TXpower']])\n","\n","#no need to use standard scalar for our targets, in this case it is energy"],"metadata":{"id":"6imM8xouM7e2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[" Encoding Categorical Variables"],"metadata":{"id":"aTiagz0WOfZO"}},{"cell_type":"code","source":["le = LabelEncoder()\n","energy_cons['BS'] = le.fit_transform(energy_cons['BS'])"],"metadata":{"id":"c96ATOIlOBeB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# energy_cons['Time'] = le.fit_transform(energy_cons['Time'])\n","\n"," #you don't need to encode the time, not necessary instead you can derive date features\n","#such as year, month, hour, minute, week etc"],"metadata":{"id":"nTLWCHu9T3_b"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#feature engineering\n","\n","energy_cons['year'] = energy_cons['Time'].dt.year\n","energy_cons['month'] = energy_cons['Time'].dt.month\n","energy_cons['day'] = energy_cons['Time'].dt.day\n","energy_cons['hour'] = energy_cons['Time'].dt.hour\n","energy_cons['weekday'] = energy_cons['Time'].dt.weekday\n","energy_cons['minute'] = energy_cons['Time'].dt.minute\n","energy_cons['second'] = energy_cons['Time'].dt.second\n","energy_cons['quarter'] = energy_cons['Time'].dt.quarter\n","energy_cons['dayofyear'] = energy_cons['Time'].dt.dayofyear\n","energy_cons['dayofweek'] = energy_cons['Time'].dt.dayofweek\n","energy_cons['is_weekend'] = (energy_cons['weekday'] >= 5).astype(int)\n","energy_cons['is_month_start'] = (energy_cons['day'] == 1).astype(int)\n","energy_cons['is_month_end'] = (energy_cons['day'] == energy_cons['Time'].dt.days_in_month.max()).astype(int)\n","energy_cons['is_quarter_start'] = (energy_cons['month'] == 1).astype(int)\n","energy_cons['is_quarter_end'] = (energy_cons['month'] == 4).astype(int)\n","energy_cons['is_year_start'] = (energy_cons['month'] == 1).astype(int)\n","energy_cons['is_year_end'] = (energy_cons['month'] == 12).astype(int)\n","energy_cons['is_leap_year'] = (energy_cons['year'] % 4 == 0).astype(int)"],"metadata":{"id":"i4eHKgnawXTZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**2. Select your target variable and the features**\n"],"metadata":{"id":"m7c29WnUOtw8"}},{"cell_type":"code","source":["X = energy_cons.drop(['Energy','Time'], axis=1)\n","y = energy_cons['Energy']"],"metadata":{"id":"Il8LQxOMOkoV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["xtrain,xtest,ytrain,ytest = train_test_split(X,y,test_size = 0.25,random_state = 42)"],"metadata":{"id":"8taGJ-59P7jK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(f'Xtrain Shape : {xtrain.shape}')\n","print(f'ytrain Shape : {ytrain.shape}')\n","print(f'Xtest Shape : {xtest.shape}')\n","print(f'ytest Shape : {ytest.shape}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b5cRLW_tQMWg","executionInfo":{"status":"ok","timestamp":1719660876674,"user_tz":-60,"elapsed":32,"user":{"displayName":"Jacob Ojumu","userId":"10159632377303667920"}},"outputId":"27d56af1-ed7c-49be-e5b6-a3928c382b11"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Xtrain Shape : (69471, 22)\n","ytrain Shape : (69471,)\n","Xtest Shape : (23158, 22)\n","ytest Shape : (23158,)\n"]}]},{"cell_type":"markdown","source":["USING LINEAR REGRESSION, POLYNOMIAL REGRESSION, RANDOM FOREST REGRESSOR, KNN\n","\n","\n","\n"],"metadata":{"id":"h-DPFkdk70mj"}},{"cell_type":"code","source":["models = [('Linear Regression', LinearRegression()),\n","          ('Polynomial Regression', make_pipeline(PolynomialFeatures(degree=2), LinearRegression())),\n","          ('Random Forest', RandomForestRegressor(n_estimators=500, random_state=42)),\n","          ('KNN', KNeighborsRegressor(n_neighbors=7))\n","]\n","\n","results_list = []\n","\n","# Evaluation\n","for name, model in models:\n","    model.fit(xtrain, ytrain)\n","    y_pred = model.predict(xtest)\n","\n","    # Evaluate the model\n","    msr = mean_squared_error(ytest, y_pred)\n","    r2s = r2_score(ytest, y_pred)\n","    results_list.append({'Model': name, 'mean_squared_error': msr, 'r2_score': r2s})\n","\n","results = pd.DataFrame(results_list)"],"metadata":{"id":"dJCbKEZ9JrNO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["results"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":176},"id":"E6-lUwPDMEdy","executionInfo":{"status":"ok","timestamp":1719661201338,"user_tz":-60,"elapsed":87,"user":{"displayName":"Jacob Ojumu","userId":"10159632377303667920"}},"outputId":"3518b2ca-da69-4aa7-bd99-5b3d3b2974ee"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                   Model  mean_squared_error  r2_score\n","0      Linear Regression           85.216659  0.555337\n","1  Polynomial Regression           74.004843  0.613841\n","2          Random Forest            7.446273  0.961145\n","3                    KNN           51.846641  0.729463"],"text/html":["\n","  <div id=\"df-a515f31a-b460-4c80-8283-8b898e2c30a0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>mean_squared_error</th>\n","      <th>r2_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Linear Regression</td>\n","      <td>85.216659</td>\n","      <td>0.555337</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Polynomial Regression</td>\n","      <td>74.004843</td>\n","      <td>0.613841</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Random Forest</td>\n","      <td>7.446273</td>\n","      <td>0.961145</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>KNN</td>\n","      <td>51.846641</td>\n","      <td>0.729463</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a515f31a-b460-4c80-8283-8b898e2c30a0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a515f31a-b460-4c80-8283-8b898e2c30a0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a515f31a-b460-4c80-8283-8b898e2c30a0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b3bc08df-7301-4186-8ef8-03b981d9a1e1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b3bc08df-7301-4186-8ef8-03b981d9a1e1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b3bc08df-7301-4186-8ef8-03b981d9a1e1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_66577588-e91c-43d3-8f2a-f1a2bee76cb5\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('results')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_66577588-e91c-43d3-8f2a-f1a2bee76cb5 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('results');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"results","summary":"{\n  \"name\": \"results\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Polynomial Regression\",\n          \"KNN\",\n          \"Linear Regression\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_squared_error\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34.37527897753804,\n        \"min\": 7.446272842488542,\n        \"max\": 85.21665875835144,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          74.00484280379384,\n          51.84664123747481,\n          85.21665875835144\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"r2_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1793711604823504,\n        \"min\": 0.5553371076958546,\n        \"max\": 0.9611451414867604,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.6138406747562888,\n          0.7294627859760865,\n          0.5553371076958546\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["# Plot actual vs. predicted values\n","plt.scatter(ytest, y_pred)\n","plt.xlabel('Actual Values')\n","plt.ylabel('Predicted Values')\n","plt.title('Actual vs. Predicted Values')\n","plt.plot([min(ytest), max(ytest)], [min(ytest), max(ytest)], color='red')  # Line for perfect predictions\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"PuEFB-29M700","executionInfo":{"status":"ok","timestamp":1719661201339,"user_tz":-60,"elapsed":56,"user":{"displayName":"Jacob Ojumu","userId":"10159632377303667920"}},"outputId":"f964a9c1-4d57-4318-cd25-5e3f849eb315"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"RH5ERQotO3fG"},"execution_count":null,"outputs":[]}]}